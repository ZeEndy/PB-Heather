[gd_scene load_steps=23 format=3 uid="uid://dwddauml6erf8"]

[ext_resource type="Shader" path="res://Scripts/HUD/VHSOverlayShader.gdshader" id="1_0r6lt"]
[ext_resource type="FontFile" uid="uid://dqo5y8jcehxg2" path="res://Data/Font/VCR_OSD_MONO_1.001.ttf" id="1_k7jvf"]
[ext_resource type="Texture2D" uid="uid://44hsxv2p1hoi" path="res://Data/Sprites/Textures/UI/Cursor.png" id="2_kbojr"]
[ext_resource type="Shader" path="res://Scripts/HUD/VHSOverlayShader_Pass2.gdshader" id="3_vxky5"]
[ext_resource type="Texture2D" uid="uid://byoevh5wffwes" path="res://Data/Sprites/Textures/UI/corruption_strip31.png" id="4_puxal"]
[ext_resource type="AudioStream" uid="uid://17lcg6v2rc2" path="res://Data/Sounds/UI/Death/vhs_start.wav" id="7_v7nwv"]
[ext_resource type="AudioStream" uid="uid://dg1bbd0g7sh23" path="res://Data/Sounds/UI/Death/vhs_loop.wav" id="8_ft1l7"]
[ext_resource type="AudioStream" uid="uid://s6f53t0phuae" path="res://Data/Sounds/UI/Death/vhs_end.wav" id="9_wd46h"]
[ext_resource type="AudioStream" uid="uid://bqlqh3pv1uvja" path="res://Data/Sounds/UI/Menu/click.wav" id="11_jki72"]
[ext_resource type="AudioStream" uid="uid://3u3hbdyvfo61" path="res://Data/Sounds/UI/Menu/hover.wav" id="12_irpgo"]
[ext_resource type="AudioStream" uid="uid://yl6ev6pw67ye" path="res://Data/Sounds/UI/Menu/slider.wav" id="13_doitk"]

[sub_resource type="GDScript" id="2"]
script/source = "extends CanvasLayer

@onready var aspect=get_node(\"Aspect\") as Control
@onready var cursor=get_node(\"Aspect/Cursor\") as Sprite2D
@onready var l_ammo=get_node(\"Aspect/Ammo\") as Label
@onready var l_score=get_node(\"Aspect/Score\") as Label
@onready var l_combo=get_node(\"Aspect/Combo\") as Label
@onready var l_time=get_node(\"Aspect/Time\") as Label
@onready var l_play=get_node(\"Aspect/Play\") as Label

@onready var l_restart=get_node(\"Shaders/DeathPass/Restart\") as Label
@onready var death_shader=get_node(\"Shaders/DeathPass/Shader\").material as ShaderMaterial

@onready var d_start=get_node(\"Shaders/DeathPass/Start\")
@onready var d_loop=get_node(\"Shaders/DeathPass/Loop\")
@onready var d_end=get_node(\"Shaders/DeathPass/End\")


@onready var s_click=get_node(\"Click\")
@onready var s_hover=get_node(\"Hover\")
@onready var s_slider=get_node(\"Slider\")

#Game UI
var ammo=1
var max_ammo=1
var ammo_flash=0.0

var level_time=0
var desired_points=0
var points=0
var combo=0

var floor=0
var floor_count=2

var play_timer=0.0

var health=1.0
var health_iterp=0.0

var restart_flash=0.0

var fuck_cum_retard=false
var in_combat=true
#Cursor
var cursor_sens=1.0
var window_based=false
var cursor_anim=\"default\"
var mouse = Vector2()
var factor=0.8
@onready var p_pos=get_viewport().size*0.5

var real_mouse=Vector2()

var focus_input=\"mouse\"



func grab_mouse_back():
	if window_based==false:
		Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	else:
		Input.set_mouse_mode(Input.MOUSE_MODE_CONFINED_HIDDEN)

# Called when the node enters the scene tree for the first time.
func _ready():
	DisplayServer.window_set_vsync_mode(DisplayServer.VSYNC_DISABLED)
	await RenderingServer.frame_post_draw
	fuck_cum_retard=true
	if window_based==false:
		Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	else:
		Input.set_mouse_mode(Input.MOUSE_MODE_CONFINED_HIDDEN)



func _process(delta):
	play_timer=clamp(play_timer-delta,0.0,3.0)
	l_play.visible=bool(round((sin(play_timer*PI*4+PI*1.5)+1.0)*0.5))
	points=move_toward(points,desired_points,500*delta)
	l_score.text=\"%05dpts\"%[points]
	
	if fuck_cum_retard==true:
		if ammo>0:
			l_ammo.text=str(ammo)+\"/\"+str(max_ammo)
			l_ammo.visible=true
		else:
			if l_ammo.text!=\"EMPTY\":
				ammo_flash=3.0
			l_ammo.text=\"EMPTY\"
			ammo_flash=clamp(ammo_flash-delta,0.0,3.0)
			l_ammo.visible=bool(round((sin(ammo_flash*PI*4+PI*1.5)+1.0)*0.5))
		
		
		var mils=fmod(level_time,1.0)*1000.0
		var secs=fmod(level_time,60.0)
		var mins=fmod(level_time,3600.0) / 60.0
		
		l_time.text= \"%02d:%02d:%03d\" % [mins,secs,mils]
		
		l_combo.text=\"%03dx\"%[combo]
		
		if health_iterp>0.1 && 1.0-ceil(health)==1.0:
			if restart_flash<1.0:
				restart_flash=1.0
			restart_flash+=delta
			if l_restart.text!=\"PRESS R TO RECALIBRATE\":
				d_start.play()
			l_restart.text=\"PRESS R TO RECALIBRATE\"
		else:
			restart_flash=clamp(restart_flash-delta,0.0,3.0)
			if l_restart.text==\"PRESS R TO RECALIBRATE\":
				d_end.play()
			l_restart.text=\"VIDEO CALIBRATION\"
		l_restart.visible=bool(round((sin(restart_flash*PI*4+PI*1.5)+1.0)*0.5))
		health_iterp=lerp(health_iterp,(1.0-health)*1.2,5.0*delta)
		death_shader.set_shader_parameter(\"glitch\",health_iterp)
		
		d_loop.volume_db=lerp(d_loop.volume_db,-((health)*80.0),10*delta)
	#CURSOR
		if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
			var width=get_viewport().get_visible_rect().size.x
			var height=get_viewport().get_visible_rect().size.y
			
			if Vector2(Input.get_action_strength(\"look_left\")-Input.get_action_strength(\"look_right\"),Input.get_action_strength(\"look_up\")-Input.get_action_strength(\"look_down\")).length()>0:
				focus_input=\"controller\"
			
			if focus_input==\"controller\":
				if Vector2(Input.get_action_strength(\"look_left\")-Input.get_action_strength(\"look_right\"),Input.get_action_strength(\"look_up\")-Input.get_action_strength(\"look_down\")).length()>0:
					if !Input.is_action_pressed(\"far_look\"):
						mouse=Vector2(Input.get_action_strength(\"look_right\")-Input.get_action_strength(\"look_left\"),Input.get_action_strength(\"look_down\")-Input.get_action_strength(\"look_up\")).normalized()*54
					else:
						mouse=Vector2(Input.get_action_strength(\"look_right\")-Input.get_action_strength(\"look_left\"),Input.get_action_strength(\"look_down\")-Input.get_action_strength(\"look_up\"))*270
			else:
				
				mouse.x=((real_mouse.x-width*0.5))*factor
				mouse.y=((real_mouse.y-height*0.5))*factor
				
				if window_based==true:
					real_mouse=get_viewport().get_mouse_position()
				
				real_mouse.x=clamp(real_mouse.x,0,width)
				real_mouse.y=clamp(real_mouse.y,0,height)
	#		Input.warp_mouse(p_pos+mouse)
			cursor.position=lerp(cursor.position,p_pos+mouse,0.88)
			
			
			
			
			if Input.is_action_pressed(\"far_look\"):
				factor=lerp(factor,1.6,0.5)
			else:
				factor=lerp(factor,0.9,0.5)
		else:
			cursor.position=lerp(cursor.position,get_viewport().get_mouse_position(),0.88)

func _input(event):
	if event is InputEventMouseMotion and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		real_mouse+=event.relative*cursor_sens
		focus_input=\"mouse\"

func set_player_pos(pos:Vector2):
	pos=p_pos
func _on_ammo_resized():
	pass # Replace with function body.
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_xnviq"]
shader = ExtResource("1_0r6lt")

[sub_resource type="Shader" id="Shader_c1w0r"]
code = "shader_type canvas_item;
//custom shader by zeendy for R to restart
//part of the VHS shaders

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform sampler2D glitch_texture: repeat_enable,filter_nearest_mipmap;
uniform float frame_count : hint_range(0.0, 60.0, 1.0);
uniform float frame_rate : hint_range(0.0, 60.0, 1.0);
uniform float glitch;

#define DEFINE(a,iResolution) (iResolution.y / 450.0) * a

float GoldNoise(const in vec2 xy, const in float seed)
{
    //return fract(tan(distance(xy * PHI, xy) * seed) * xy.x);
    return fract(sin(dot(xy * seed, vec2(12.9898, 78.233))) * 43758.5453);
}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec4 Noise(const in float grainSize, const in bool monochromatic, in vec2 fragCoord, float fps)
{
    float seed = fps > 0.0 ? floor(fract(TIME) * fps) / fps : TIME;
    seed += 1.0;
    
    if (grainSize > 1.0)
    {
        fragCoord.x = floor(fragCoord.x / grainSize);
        fragCoord.y = floor(fragCoord.y / grainSize);
    }

    fragCoord.x += 1.0;
    
    float r = GoldNoise(fragCoord, seed);    
    float g = monochromatic ? r : GoldNoise(fragCoord, seed + 1.0);
    float b = monochromatic ? r : GoldNoise(fragCoord, seed + 2.0);
    
    
    return vec4(r, g, b, 1.0);
}

vec3 big_noise(){
	return vec3(0.0);
}

void fragment(){
	float frame=floor(fract(TIME) * 30.0) / 24.0;
	vec2 uv=SCREEN_UV;
	
	
	float g_capped=clamp(glitch-0.2,0.0,1.0);
	//uv.x=mod(uv.x-g_capped*0.5,1.0);
	float y_off=g_capped-(sin(TIME*60.0)*0.01)*g_capped;
	uv.y=uv.y-y_off;
	vec2 uv2=SCREEN_UV+vec2(0.0,y_off);
	vec2 uv3=SCREEN_UV+vec2(0.0,y_off);
	if (glitch>0.2){
		uv.x+=clamp(round(rand(vec2(TIME,UV.y))*((glitch-0.2)*0.5)*100.0)*0.01,-0.6,0.6);
	}
	vec2 scale=(uv-vec2(0.5))*((1.0-(clamp(glitch,0.0,0.2)*0.5)))+vec2(0.5);
	vec3 col = texture(SCREEN_TEXTURE, scale,glitch*0.5).ggg;
	uv2.x+=(tan(-uv2.y+TIME*2.12353426)*0.1)*glitch+clamp(round(rand(vec2(TIME,UV.y))*((glitch)*0.5)*100.0)*0.01,-0.1,0.1);
	scale=(uv2-vec2(0.5))*((1.0-(clamp(glitch,0.0,1.0)*0.5)))+vec2(0.5);
	col.r=texture(SCREEN_TEXTURE, scale,glitch*0.5).r;
	uv3.x-=(tan(uv3.y+TIME*2.4627354)*0.1)*glitch+clamp(round(rand(vec2(TIME,UV.y*0.23465425))*((glitch)*0.5)*100.0)*0.01,-0.1,0.1);
	scale=(uv3-vec2(0.5))*((1.0-(clamp(glitch,0.0,1.0)*0.5)))+vec2(0.5);
	col.b=texture(SCREEN_TEXTURE, scale-vec2(0.1)*glitch,glitch*0.5).b;
	
	
	
//	float y_check=Noise(DEFINE(3.0,1.0/SCREEN_PIXEL_SIZE),true,vec2(0,FRAGCOORD.y),24.0).r;
//	float x_check=Noise(DEFINE(3.0,1.0/SCREEN_PIXEL_SIZE),true,vec2(FRAGCOORD.x,FRAGCOORD.y),24.0).r;
//	if (sin(y_check+rand(vec2(TIME)))>0.05 && sin(y_check+TIME)<0.6 && sin(x_check+rand(vec2(TIME)))>0.94 && sin(x_check+TIME)<0.95){
//		col+=vec3(y_check*0.5)*glitch;
//
//
//		//col.b=Noise(DEFINE(50.0,1.0/SCREEN_PIXEL_SIZE),false,FRAGCOORD.xy,24.0).r;
//	}

	COLOR.rgb = col.rgb;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vkn6m"]
shader = SubResource("Shader_c1w0r")
shader_parameter/frame_count = 31.0
shader_parameter/frame_rate = 31.0
shader_parameter/glitch = 0.0
shader_parameter/glitch_texture = ExtResource("4_puxal")

[sub_resource type="Shader" id="Shader_c68wt"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's CanvasItemMaterial.

shader_type canvas_item;
render_mode blend_mix;
uniform int particles_anim_h_frames;
uniform int particles_anim_v_frames;
uniform bool particles_anim_loop;

void vertex() {
	float h_frames = float(particles_anim_h_frames);
	float v_frames = float(particles_anim_v_frames);
	VERTEX.xy /= vec2(h_frames, v_frames);
	float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
	float particle_frame = floor(INSTANCE_CUSTOM.z * float(particle_total_frames));
	if (!particles_anim_loop) {
		particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	} else {
		particle_frame = mod(particle_frame, particle_total_frames);
	}	UV /= vec2(h_frames, v_frames);
	UV += vec2(mod(particle_frame, h_frames) / h_frames, floor((particle_frame + 0.5) / h_frames) / v_frames);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_fmdjo"]
shader = SubResource("Shader_c68wt")
shader_parameter/particles_anim_h_frames = 1
shader_parameter/particles_anim_v_frames = 1
shader_parameter/particles_anim_loop = false

[sub_resource type="Shader" id="Shader_ksap7"]
code = "shader_type canvas_item;

//shader used https://www.shadertoy.com/view/sltBWM
// Unsharp mask + balancing pass

const vec3 W = vec3(0.2126,0.7152,0.0722);

#define BLACK vec4(0.0, 0.0, 0.0, 1.0)
#define WHITE vec4(1.0)
#define DEFINE(a,iResolution) (iResolution.y / 450.0) * a

float GoldNoise(const in vec2 xy, const in float seed)
{
    //return fract(tan(distance(xy * PHI, xy) * seed) * xy.x);
    return fract(sin(dot(xy * seed, vec2(12.9898, 78.233))) * 43758.5453);
}

float GetLuminance(vec3 color){
	float ret = W.r * color.r + W.g * color.g + W.b * color.b;
	return ret;
}



// BlendSoftLight credit to Jamie Owen: https://github.com/jamieowen/glsl-blend
float BlendSoftLight(float base, float blend) 
{
	return (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));
}

vec4 BlendSoftLight1(vec4 base, vec4 blend) 
{
	return vec4(BlendSoftLight(base.r,blend.r),BlendSoftLight(base.g,blend.g),BlendSoftLight(base.b,blend.b), 1.0);
}

vec4 BlendSoftLight2(vec4 base, vec4 blend, float opacity) 
{
	return (BlendSoftLight1(base, blend) * opacity + base * (1.0 - opacity));
}

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture;



vec4 Noise(const in float grainSize, const in bool monochromatic, in vec2 fragCoord, float fps)
{
    float seed = fps > 0.0 ? floor(fract(TIME) * fps) / fps : TIME;
    seed += 1.0;
    
    if (grainSize > 1.0)
    {
        fragCoord.x = floor(fragCoord.x / grainSize);
        fragCoord.y = floor(fragCoord.y / grainSize);
    }

    fragCoord.x += 1.0;
    
    float r = GoldNoise(fragCoord, seed);    
    float g = monochromatic ? r : GoldNoise(fragCoord, seed + 1.0);
    float b = monochromatic ? r : GoldNoise(fragCoord, seed + 2.0);
    
    
    return vec4(r, g, b, 1.0);
}

const float NOISE_BLEND = 0.05;

vec4 ClampLevels(in vec4 pixel, const in float blackLevel, const in float whiteLevel)
{
    pixel = mix(pixel, BLACK, 1.0 - whiteLevel);
    pixel = mix(pixel, WHITE, blackLevel);
    
    return pixel;
}

vec4 Saturation(vec4 pixel, float adjustment)
{
    vec3 intensity = vec3(dot(pixel.rgb, W));
    return vec4(mix(intensity, pixel.rgb, adjustment), 1.0);
}

vec4 TintShadows(vec4 pixel, vec3 color)
{
    const float POWER = 1.5;
    
    // Curve is an approximation of Photoshop's color balance > shadows
    if (color.r > 0.0)
        pixel.r = mix(pixel.r, 1.0 - pow(abs(pixel.r - 1.0), POWER), color.r);
    if (color.g > 0.0)
        pixel.g = mix(pixel.g, 1.0 - pow(abs(pixel.g - 1.0), POWER), color.g);
    if (color.b > 0.0)
        pixel.b = mix(pixel.b, 1.0 - pow(abs(pixel.b - 1.0), POWER), color.b);
        
    return pixel;
}



void fragment()
{
    float NOISE_GRAIN_SIZE = DEFINE(3.0,1.0/SCREEN_PIXEL_SIZE);
    COLOR = BlendSoftLight2(texture(SCREEN_TEXTURE,SCREEN_UV), Noise(NOISE_GRAIN_SIZE, false, FRAGCOORD.xy, 24.0), NOISE_BLEND);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_mqfnv"]
shader = SubResource("Shader_ksap7")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_34261"]
shader = ExtResource("3_vxky5")

[sub_resource type="Shader" id="Shader_k3lvc"]
code = "shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

void fragment() {
	COLOR = textureLod(SCREEN_TEXTURE, SCREEN_UV, 5.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1spu3"]
shader = SubResource("Shader_k3lvc")

[node name="UI" type="CanvasLayer"]
layer = 3
script = SubResource("2")
metadata/_edit_vertical_guides_ = [-121.0]

[node name="Aspect" type="Control" parent="."]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="Ammo" type="Label" parent="Aspect"]
layout_mode = 1
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_left = 127.0
offset_top = -178.0
offset_right = 277.0
offset_bottom = -130.0
grow_vertical = 0
theme_override_fonts/font = ExtResource("1_k7jvf")
theme_override_font_sizes/font_size = 62
text = "21/20"

[node name="Combo" type="Label" parent="Aspect"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -218.0
offset_top = 228.0
offset_right = -98.0
offset_bottom = 276.0
grow_horizontal = 0
theme_override_fonts/font = ExtResource("1_k7jvf")
theme_override_font_sizes/font_size = 62
text = "123x"
horizontal_alignment = 2

[node name="Score" type="Label" parent="Aspect"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -368.0
offset_top = 131.0
offset_right = -98.0
offset_bottom = 179.0
grow_horizontal = 0
theme_override_fonts/font = ExtResource("1_k7jvf")
theme_override_font_sizes/font_size = 62
text = "12345 PTS"
horizontal_alignment = 2

[node name="Time" type="Label" parent="Aspect"]
layout_mode = 1
offset_left = 127.0
offset_top = 131.0
offset_right = 367.0
offset_bottom = 179.0
theme_override_fonts/font = ExtResource("1_k7jvf")
theme_override_font_sizes/font_size = 51
text = "00:00:00"

[node name="Level Progress" type="Label" parent="Aspect"]
visible = false
layout_mode = 1
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -195.0
offset_top = -178.0
offset_right = 195.0
offset_bottom = -130.0
grow_horizontal = 2
grow_vertical = 0
theme_override_fonts/font = ExtResource("1_k7jvf")
theme_override_font_sizes/font_size = 51
text = "0---+---+---1"

[node name="Play" type="Label" parent="Aspect"]
layout_mode = 0
offset_left = 130.0
offset_top = 228.0
offset_right = 280.0
offset_bottom = 276.0
theme_override_fonts/font = ExtResource("1_k7jvf")
theme_override_font_sizes/font_size = 51
text = "PLAY►"

[node name="ProgressBar" type="ProgressBar" parent="Aspect"]
visible = false
layout_mode = 0
offset_left = 1686.0
offset_top = 288.0
offset_right = 1690.0
offset_bottom = 315.0
show_percentage = false

[node name="Cursor" type="Sprite2D" parent="Aspect"]
texture_filter = 5
texture = ExtResource("2_kbojr")

[node name="Shaders" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
mouse_filter = 2

[node name="Pass1" type="CanvasLayer" parent="Shaders"]
layer = 3

[node name="Shader" type="ColorRect" parent="Shaders/Pass1"]
material = SubResource("ShaderMaterial_xnviq")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0, 0, 0, 1)

[node name="DeathPass" type="CanvasLayer" parent="Shaders"]
layer = 4

[node name="Shader" type="ColorRect" parent="Shaders/DeathPass"]
material = SubResource("ShaderMaterial_vkn6m")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="Restart" type="Label" parent="Shaders/DeathPass"]
visible = false
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -396.0
offset_top = -29.0
offset_right = 396.0
offset_bottom = 29.0
grow_horizontal = 2
grow_vertical = 2
theme_override_fonts/font = ExtResource("1_k7jvf")
theme_override_font_sizes/font_size = 62
horizontal_alignment = 1
vertical_alignment = 1

[node name="Node2D" type="Node2D" parent="Shaders/DeathPass"]
material = SubResource("ShaderMaterial_fmdjo")

[node name="Start" type="AudioStreamPlayer" parent="Shaders/DeathPass"]
stream = ExtResource("7_v7nwv")
bus = &"SFX"

[node name="Loop" type="AudioStreamPlayer" parent="Shaders/DeathPass"]
stream = ExtResource("8_ft1l7")
autoplay = true
bus = &"SFX"

[node name="End" type="AudioStreamPlayer" parent="Shaders/DeathPass"]
stream = ExtResource("9_wd46h")
bus = &"SFX"

[node name="Pass3" type="CanvasLayer" parent="Shaders"]
layer = 3

[node name="Shader" type="ColorRect" parent="Shaders/Pass3"]
material = SubResource("ShaderMaterial_mqfnv")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0, 0, 0, 1)

[node name="Pass2" type="CanvasLayer" parent="Shaders"]
layer = 3

[node name="Shader" type="ColorRect" parent="Shaders/Pass2"]
material = SubResource("ShaderMaterial_34261")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0, 0, 0, 1)

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
material = SubResource("ShaderMaterial_1spu3")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="Click" type="AudioStreamPlayer" parent="."]
stream = ExtResource("11_jki72")
max_polyphony = 10
bus = &"SFX"

[node name="Hover" type="AudioStreamPlayer" parent="."]
stream = ExtResource("12_irpgo")
max_polyphony = 10
bus = &"SFX"

[node name="Slider" type="AudioStreamPlayer" parent="."]
stream = ExtResource("13_doitk")
max_polyphony = 10
bus = &"SFX"
